// <auto-generated />
using System;
using Biblioteca.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteca.Infrastructure.Migrations
{
    [DbContext(typeof(BibliotecaDbContext))]
    [Migration("20251007005410_AjusteRelacionamentoLeitorEmprestimos")]
    partial class AjusteRelacionamentoLeitorEmprestimos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biblioteca.Domain.Entities.Autor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Autores", (string)null);
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Bibliotecario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Bibliotecarios", (string)null);
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Leitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int>("LimiteEmprestimosAtivos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Leitores", (string)null);
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Livro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnoPublicacao")
                        .HasColumnType("int");

                    b.Property<Guid?>("AutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("bit");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ISBN");

                    b.Property<int>("NumeroPaginas")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasDatabaseName("IX_Livro_ISBN");

                    b.ToTable("Livros", (string)null);
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Reserva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LeitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeitorId");

                    b.HasIndex("LivroId");

                    b.ToTable("Reservas", (string)null);
                });

            modelBuilder.Entity("Emprestimo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEmprestimo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPrevistaDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataRealDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeitorId");

                    b.HasIndex("LivroId");

                    b.ToTable("Emprestimos", (string)null);
                });

            modelBuilder.Entity("LivroCategoria", b =>
                {
                    b.Property<Guid>("LivroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LivroId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("LivroCategoria", (string)null);
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Autor", b =>
                {
                    b.OwnsOne("Biblioteca.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AutorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EnderecoEmail")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Email");

                            b1.HasKey("AutorId");

                            b1.ToTable("Autores");

                            b1.WithOwner()
                                .HasForeignKey("AutorId");
                        });

                    b.OwnsOne("Biblioteca.Domain.ValueObjects.NomeCompleto", "NomeCompleto", b1 =>
                        {
                            b1.Property<Guid>("AutorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PrimeiroNome")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PrimeiroNome");

                            b1.Property<string>("UltimoNome")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Sobrenome");

                            b1.HasKey("AutorId");

                            b1.ToTable("Autores");

                            b1.WithOwner()
                                .HasForeignKey("AutorId");
                        });

                    b.Navigation("Email");

                    b.Navigation("NomeCompleto");
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Bibliotecario", b =>
                {
                    b.OwnsOne("Biblioteca.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("BibliotecarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EnderecoEmail")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Email");

                            b1.HasKey("BibliotecarioId");

                            b1.ToTable("Bibliotecarios");

                            b1.WithOwner()
                                .HasForeignKey("BibliotecarioId");
                        });

                    b.OwnsOne("Biblioteca.Domain.ValueObjects.NomeCompleto", "NomeCompleto", b1 =>
                        {
                            b1.Property<Guid>("BibliotecarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PrimeiroNome")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PrimeiroNome");

                            b1.Property<string>("UltimoNome")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Sobrenome");

                            b1.HasKey("BibliotecarioId");

                            b1.ToTable("Bibliotecarios");

                            b1.WithOwner()
                                .HasForeignKey("BibliotecarioId");
                        });

                    b.Navigation("Email");

                    b.Navigation("NomeCompleto");
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Leitor", b =>
                {
                    b.OwnsOne("Biblioteca.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("LeitorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EnderecoEmail")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Email");

                            b1.HasKey("LeitorId");

                            b1.ToTable("Leitores");

                            b1.WithOwner()
                                .HasForeignKey("LeitorId");
                        });

                    b.OwnsOne("Biblioteca.Domain.ValueObjects.NomeCompleto", "NomeCompleto", b1 =>
                        {
                            b1.Property<Guid>("LeitorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PrimeiroNome")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PrimeiroNome");

                            b1.Property<string>("UltimoNome")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Sobrenome");

                            b1.HasKey("LeitorId");

                            b1.ToTable("Leitores");

                            b1.WithOwner()
                                .HasForeignKey("LeitorId");
                        });

                    b.OwnsOne("Biblioteca.Domain.ValueObjects.CPF", "CPF", b1 =>
                        {
                            b1.Property<Guid>("LeitorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)")
                                .HasColumnName("CPF");

                            b1.HasKey("LeitorId");

                            b1.ToTable("Leitores");

                            b1.WithOwner()
                                .HasForeignKey("LeitorId");
                        });

                    b.OwnsOne("Biblioteca.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("LeitorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("CEP")
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)")
                                .HasColumnName("CEP");

                            b1.Property<string>("Cidade")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Numero")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Numero");

                            b1.Property<string>("Rua")
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)")
                                .HasColumnName("Rua");

                            b1.HasKey("LeitorId");

                            b1.ToTable("Leitores");

                            b1.WithOwner()
                                .HasForeignKey("LeitorId");
                        });

                    b.Navigation("CPF");

                    b.Navigation("Email");

                    b.Navigation("Endereco");

                    b.Navigation("NomeCompleto");
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Livro", b =>
                {
                    b.HasOne("Biblioteca.Domain.Entities.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Reserva", b =>
                {
                    b.HasOne("Biblioteca.Domain.Entities.Leitor", "Leitor")
                        .WithMany("Reservas")
                        .HasForeignKey("LeitorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Biblioteca.Domain.Entities.Livro", "Livro")
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leitor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("Emprestimo", b =>
                {
                    b.HasOne("Biblioteca.Domain.Entities.Leitor", "Leitor")
                        .WithMany("Emprestimos")
                        .HasForeignKey("LeitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Biblioteca.Domain.Entities.Livro", "Livro")
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leitor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("LivroCategoria", b =>
                {
                    b.HasOne("Biblioteca.Domain.Entities.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Domain.Entities.Livro", null)
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biblioteca.Domain.Entities.Leitor", b =>
                {
                    b.Navigation("Emprestimos");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
